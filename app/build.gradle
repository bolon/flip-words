apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'

android {
    compileSdkVersion 26
    buildToolsVersion "25.0.3"

    def versionPropsFile = new File('version.properties')

    if (versionPropsFile.canRead()) {
        def vcode = getVersionCode()
        def vname = getVersionName()

        incrementVersionProp(versionPropsFile)

        defaultConfig {
            applicationId "com.nnd.flipwords"
            minSdkVersion 16
            targetSdkVersion 26
            versionCode vcode
            versionName vname
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            renderscriptSupportModeEnabled true
        }
    } else {
        throw new GradleException("Could not read version.properties")
    }

    buildTypes.each {
        it.buildConfigField "String", "API_KEY_WORDNIK", getProperties("API_KEY_WORDNIK")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

/**
 * Get properties from private file
 * @param property property name
 * @return value of property
 */
def getProperties(String property) {
    Properties properties = new Properties()
    properties.load(new FileInputStream("$rootDir/key.properties"))

    return "\"" + properties.getProperty(property) + "\""
}

def getVersionCode() {
    Properties properties = new Properties()
    properties.load(new FileInputStream("$rootDir/version.properties"))

    def major = properties['major'] as int // 1..∞
    def minor = properties['minor'] as int // 1..99
    def build = properties['build'] as int // 0..999

    return (major * 100 + minor) * 1000 + build;
}

def getVersionName() {
    Properties properties = new Properties()
    properties.load(new FileInputStream("$rootDir/version.properties"))

    def versionName = properties['major'] + "." + properties['minor'] + "." + properties['build']

    return versionName;
}

def incrementVersionProp(File versionFile) {
    Properties properties = new Properties()
    properties.load(new FileInputStream("$rootDir/version.properties"))

    def major = properties['major'] as int // 1..∞
    def minor = properties['minor'] as int // 1..99
    def build = properties['build'] as int // 0..999

    if (build + 1 > 999) {
        if (minor + 1 > 99)
            major = major + 1;
        else
            minor = minor + 1;
    } else
        build = build + 1;

    properties['build'] = build.toString()
    properties['minor'] = minor.toString()
    properties['major'] = major.toString()
    properties.store(versionFile.newWriter(), null)
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile "com.android.support:design:$androidAppCompatVersion"
    compile "com.android.support:appcompat-v7:$androidAppCompatVersion"
    compile "com.android.support:cardview-v7:$androidAppCompatVersion"

    compile "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    compile "com.jakewharton:butterknife:$butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"

    compile "org.parceler:parceler-api:$parcelerVersion"
    annotationProcessor "org.parceler:parceler:$parcelerVersion"

    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile("com.squareup.retrofit2:converter-simplexml:$retrofitVersion") {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }

    compile "com.airbnb.android:lottie:$lottieVersion"

    compile "com.android.support.constraint:constraint-layout:$androidConstraintLayoutVersion"

    compile "com.github.bolon:EasyFlipView:$bolonFlipView"

    compile "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    compile "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    compile "com.squareup.retrofit2:adapter-rxjava2:$rxRetrofitAdptVersion"

    compile "com.jakewharton.timber:timber:$timberVersion"

    testCompile 'junit:junit:4.12'
}
